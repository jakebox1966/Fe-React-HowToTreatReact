/**
 *
 * 1. 액션
 * - 상태에 어떠한 변화가 필요하면 액션(action) 이란 것이 발생한다. => 객체로 표현
 * - 액션 객체는 type 필드를 반드시 가지고 있어야 한다. => 액션의 이름
 * - type을 제외한 그 외의 값들은 나중에 상태 업데이트를 할 때 참고해야 할 값이며, 작성자 마음대로 넣을 수 있다.
 *      Ex)
 *          {
 *              type: 'TOGGLE_VALUE
 *          }
 *
 *          {
 *              type: 'ADD_TODO',
 *              data: {
 *                  id: 1,
 *                  text: '리덕스 배우기'
 *              }
 *          }
 *
 * 2. 액션 생성 함수
 * - 액션 생성 함수(action creator)는 액션 객체를 만들어 주는 함수이다.
 * - 상태에 변화를 일으켜야 할 때마다 액션 객체를 만들어야 하는데 매번 액션 객체 만들기는 번거로울 수 있고, 만드는 과정에서 실수로 정보를
 *   놓칠 수도 있다. => 함수로 만들어서 관리
 *      Ex)
 *          function addTodo(data) {
 *              return {
 *                  type: 'ADD_TODO',
 *                  data
 *              }
 *          }
 *
 *          // 화살표 함수로도 가능
 *          const changeInput = text => ({
 *            type: 'CHANGE_INPUT',
 *            text
 *          })
 *
 * 3. 리듀서
 * - 리듀서(reducer)는 변화를 일으키는 함수이다. 액션을 만들어서 발생시키면 리듀서가 현재 상태와 전달 받은 액션 객체를 파라미터로 받아 온다.
 *   그리고 두 값을 참고하여 새로운 상태를 만들어서 반환해 준다.
 *   Ex)
 *      const initialState = {
 *          counter: 1
 *      }
 *
 *      function reducer(state = initialState, action) {
 *          switch (action.type) {
 *              case INCREMENT:
 *                  return {
 *                      counter: state.counter + 1
 *                  }
 *              default:
 *                  return state
 *          }
 *      }
 *
 * 4. 스토어
 * - 프로젝트에 리덕스를 적용하기 위해 스토어(store)를 만든다.
 * - 한개의 프로젝트는 단 하나의 스토어만 가질 수 있다.
 * - 스토어 안에는 현재 애플리케이션 상태와 리듀서가 들어가 있다. (그 외에 몇가지 중요한 내장 함수 포함)
 *
 * 5. 디스패치
 * - 디스패치(dispatch)는 스토어의 내장 함수 중 하나이다. 디스패치는 '액션을 발생시키는 것' 이라고 이해하면 된다.
 * - dispatch(action) 과 같은 형태로 액션 객체를 파라미터로 넣어서 호출한다.
 * - 이 함수가 호출되면 스토어는 리듀서 함수를 실행시켜 새로운 상태를 만들어 준다.
 *
 * 6. 구독
 * - 구독(subscribe)도 스토어의 내장 함수 중 하나이다.
 * - subscribe 함수 안에 리스너 함수를 파라미터로 넣어서 호출해 주면, 이 리스너 함수가 액션이 디스패치되어 상태가 업데이트될 때마다 호출된다.
 *      Ex)
 *          const listener = () => {
 *              console.log('상태가 업데이트됨')
 *          }
 *          const unsubscribe = store.subscribe(listener)
 *          unsubscribe() // 추후 구독을 비활성화할 때 함수를 호출
 *
 *
 *
 * ******* 리덕스의 3가지 규칙 *******
 *
 * 1. 단일 스토어 : 하나의 애플리케이션 안에는 하나의 스토어를 사용한다. 여러개의 스토어 사용하는 것도 가능하지만
 *                상태관리가 복잡해질 수 있으므로 권장하지 않는다.
 *
 * 2. 읽기 전용 상태 : 리덕스 상태는 읽기 전용이다. 기존에 리액트에서 setState를 사용하여 state를 업데이트할 때도 객체나 배열을 업데이트하는
 *                   과정에서 불변성을 지켜 주기 위해 spread 연산자를 사용하거나 immer와 같은 불변성 관리 라이브러리를 사용했는데, 리덕스도
 *                   마찬가지로 상태를 업데이트할 때 기존의 객체는 건드리지 않고 새로운 객체를 생성해주어야 한다.
 *                   => 리덕스에서 내부적으로 데이터가 변경되는 것을 감지하기 위해 얕은 비교(shallow equality) 검사를 하기 때문이다.
 *
 * 3. 리듀서는 순수한 함수 : 변화를 일으키는 리듀서 함수는 순수한 함수여야 한다. 순수한 함수는 다음 조건을 만족한다.
 *
 *  - 리듀서 함수는 이전 상태와 액션 객체를 파라미터로 받는다.
 *  - 파라미터 외의 값에는 의존하면 안 된다.
 *  - 이전 상태는 절대로 건드리지 않고, 변화를 준 새로운 상태 객체를 만들어서 반환한다.
 *  - 똑같은 파라미터로 호출된 리듀서 함수는 언제나 똑같은 결과 값을 반환해야 한다.
 *
 *  *** 리듀서 함수 내부에서 랜덤 값을 만들거나, Date 함수를 사용하여 현재 시간을 가져오거나 네트워크 요청을 한다면, 파라미터가 같아도 다른 결과를
 *  만들어 낼 수 있기 때문에 사용하면 안된다. => 함수 바깥에서 처리(Ex: 액션을 만드는 과정에서 처리하거나, 리덕스 미들웨어에서 처리)
 */
