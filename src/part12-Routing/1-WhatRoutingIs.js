/**
 *
 * 1. What is Routing?
 * - 웹 애플리케이션에서 라우팅이란 사용자가 요청한 URL에 따라 알맞은 페이지를 보여주는 것을 의미한다.
 * - 여러 페이지로 구성된 웹 애플리케이션을 만들 때 페이지 별로 컴포넌트들을 분리해가면서 프로젝트를 관리하기 위해
 *   필요한 것이 바로 라우팅 시스템이다.
 *
 * 2. How to Route?
 * - 리액트 라우터(React Router) : 이 라이브러리는 리액트의 라우팅 관련 라이브러리들 중에서 가장 오래됐고, 가장 많이 사용되고 있다.
 *                               컴포넌트 기반으로 라우팅 시스템을 설정할 수 있다.
 *
 * - Next.js : 리액트 프로젝트의 프레임 워크이다. Create React App 처럼 리액트 프로젝트 설정을 하는 기능,
 *             라우팅 시스템, 최적화, 다국어 시스템 지원, 서버 사이드 렌더링 등 다양한 기능을 제공한다.
 *             이 프레임워크의 라우팅 시스템은 파일 경로 기반으로 작동한다(Directory).
 *
 * 3. What is Single Page Application
 * - 싱글 페이지 애플리케이션이란 하나의 페이지로 이루어진 애플리케이션을 의미한다.
 *   멀티 페이지 애플리케이션은 사용자가 다른 페이지로 이동할 때마다 새로운 html을 받아오고, 페이지를 로딩할 때마다
 *   서버에서 CSS, JS, 이미지 파일 등의 리소스를 전달받아 브라우저 화면에 보여주었다. => 사용자 인터랙션이 많아지면 서버 과부하
 *   따라서 멀티 페이지 애플리케이션은 사용자 인터랙션이 많고 다양한 정보를 제공하는 모던 웹 애플리케이션에는 적합하지 않다.
 *   그래서 리액트 같은 라이브러리를 사용해서 뷰 렌더링을 사용자의 브라우저가 담당하도록 하고, 우선 웹 애플리케이션을 브라우저로
 *   불러와서 실행시킨 후에 사용자와의 인터랙션이 발생하면 필요한 부분만 자바스크립트를 사용하여 업데이트하는 방식을 사용하게 되었다.
 *   이렇게 html은 한번만 받아와서 웹 애플리케이션을 실행시킨 후, 이후에는 필요한 데이터만 받아와서 화면에 업데이트하는 것이 싱글
 *   페이지 애플리케이션이다. => 기술적으로는 한 페이지만 존재하지만 사용자가 경험하기에는 여러페이지가 존재하는 것 처럼
 *
 * - 리액트 라우터 같은 라우팅 시스템은 사용자의 브라우저 주소창의 경로에 따라 알맞은 페이지를 보여준다.
 *   => 링크를 눌러 다른 페이지로 이동할 때 서버에 다른 페이지의 html을 새로 요청하는 것이 아닌, 브라우저의
 *      history API를 사용하여 브라우저의 주소창의 값만 변경하고 기존에 페이지에 띄웠던 웹 애플리케이션을 그대로 유지하면서
 *      라우팅 설정에 따라 또 다른 페이지를 보여준다.
 */
