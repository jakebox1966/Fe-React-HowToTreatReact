/**
 * 리액트 라우터 부가 기능
 *
 * - 리액트 라우터는 웹 애플리케이션에서 라우팅과 관련된 작업을 할 때 사용할 수 있는 유용한 API들을 제공한다.
 *
 * 1. useNavigate
 * - useNavigate는 Link 컴포넌트를 사용하지 않고 다른 페이지로 이동해야 하는 상황에 사용하는 Hook이다. => Layout Component에 예제
 * - navigate 함수를 사용할 때 파라미터가 숫자 타입이라면 앞으로 가거나(+1) 뒤로 간다(-1).
 * - replace 라는 옵션을 사용하면 페이지를 이동할 때 현재 페이지를 페이지 기록에 남기지 않는다.
 *      Ex)
 *          const goArticles = () => {
 *              navigate('/articles', {replace:true})
 *          }
 *
 *
 * 2. NavLink
 *
 * - NavLink 컴포넌트는 링크에서 사용하는 경로가 현재 라우트의 경로와 일치하는 경우 특정 스타일 또는 CSS 클래스를 적용하는 컴포넌트이다.
 * - 이 컴포넌트의 style과 className은 { isActive: boolean } 을 파라미터로 전달받는 함수 타입의 값을 전달한다.
 *      Ex)
 *          <NavLink
 *              style={ ({isActive}) => isActive ? activeStyle : undefined }
 *          />
 *
 *          <NavLink
 *              style={ ({isActive}) => isActive ? 'active' : undefined }
 *          />
 *
 *
 * 3. NotFound Page
 * - 사전에 정의되지 않는 경로에 사용자가 진입했을 때 보여주는 페이지이다. => 페이지를 찾을 수 없을 때 나타나는 페이지
 * - Route 컴포넌트의 가장 마지막에 위치하게 하며 *(wildcard) 문자를 사용하여 구현한다. 라우트 엘리먼트의 상단에 위치하는 라우트들의 규칙을 모두
 *   확인하고, 일치하는 라우트가 없다면 이 라우트가 화면에 나타나게 된다.
 *
 *
 * 4. Navigate 컴포넌트
 * - Navigate 컴포넌트는 컴포넌트를 화면에 보여주는 순간 다른 페이지로 이동을 하고 싶을 때 사용하는 컴포넌트이다. 즉, 페이지를 리다이렉트하고 싶을 때 사용한다.
 *   Ex) 로그인이 필요한 페이지인데 로그인을 안 했다면 로그인 페이지를 보여준다
 *
 *
 *  ** 큰 규모의 프로젝트를 진행하다 보면 웹 브라우저에서 사용할 컴포넌트, 상태 관리를 하는 로직, 그 외 여러 기능을 구현하는 함수들이 점점 쌓이면서
 *     최종 결과물인 자바스크립트 파일의 크기가 매우 커진다는 단점이 있는데 코드스플리팅이란 기술로 라우트에 따라 필요한 컴포넌트만 불러오고, 다른 컴포넌트는 다른
 *     페이지로 이동하는 등 필요한 시점에 불러오게 할 수 있다.
 */
